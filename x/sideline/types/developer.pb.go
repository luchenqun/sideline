// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sideline/sideline/developer.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Developer struct {
	Index       string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Introduce   string   `protobuf:"bytes,3,opt,name=introduce,proto3" json:"introduce,omitempty"`
	Email       string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Avatar      string   `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Education   string   `protobuf:"bytes,6,opt,name=education,proto3" json:"education,omitempty"`
	Major       string   `protobuf:"bytes,7,opt,name=major,proto3" json:"major,omitempty"`
	Skills      []string `protobuf:"bytes,8,rep,name=skills,proto3" json:"skills,omitempty"`
	TaskSuccess uint64   `protobuf:"varint,9,opt,name=taskSuccess,proto3" json:"taskSuccess,omitempty"`
	TaskFail    uint64   `protobuf:"varint,10,opt,name=taskFail,proto3" json:"taskFail,omitempty"`
	Feedbacks   []string `protobuf:"bytes,11,rep,name=feedbacks,proto3" json:"feedbacks,omitempty"`
}

func (m *Developer) Reset()         { *m = Developer{} }
func (m *Developer) String() string { return proto.CompactTextString(m) }
func (*Developer) ProtoMessage()    {}
func (*Developer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ce4c875749c9925, []int{0}
}
func (m *Developer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Developer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Developer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Developer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Developer.Merge(m, src)
}
func (m *Developer) XXX_Size() int {
	return m.Size()
}
func (m *Developer) XXX_DiscardUnknown() {
	xxx_messageInfo_Developer.DiscardUnknown(m)
}

var xxx_messageInfo_Developer proto.InternalMessageInfo

func (m *Developer) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Developer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Developer) GetIntroduce() string {
	if m != nil {
		return m.Introduce
	}
	return ""
}

func (m *Developer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Developer) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Developer) GetEducation() string {
	if m != nil {
		return m.Education
	}
	return ""
}

func (m *Developer) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *Developer) GetSkills() []string {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *Developer) GetTaskSuccess() uint64 {
	if m != nil {
		return m.TaskSuccess
	}
	return 0
}

func (m *Developer) GetTaskFail() uint64 {
	if m != nil {
		return m.TaskFail
	}
	return 0
}

func (m *Developer) GetFeedbacks() []string {
	if m != nil {
		return m.Feedbacks
	}
	return nil
}

func init() {
	proto.RegisterType((*Developer)(nil), "sideline.sideline.Developer")
}

func init() { proto.RegisterFile("sideline/sideline/developer.proto", fileDescriptor_5ce4c875749c9925) }

var fileDescriptor_5ce4c875749c9925 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x3d, 0x4e, 0xc3, 0x30,
	0x14, 0x80, 0xe3, 0x36, 0x0d, 0x8d, 0x3b, 0x61, 0x21, 0xf4, 0x40, 0xc8, 0x0a, 0x4c, 0x9d, 0xca,
	0xd0, 0x1b, 0x20, 0xc4, 0x01, 0xca, 0xc6, 0xe6, 0xc6, 0x0f, 0xc9, 0xe4, 0xc7, 0x51, 0xec, 0x54,
	0xe5, 0x16, 0x5c, 0x83, 0x9b, 0x30, 0x76, 0x64, 0x44, 0xc9, 0x45, 0x90, 0x1d, 0x92, 0xb0, 0xbd,
	0xef, 0x7b, 0xd6, 0x27, 0xeb, 0xd1, 0x5b, 0xa3, 0x24, 0xe6, 0xaa, 0xc4, 0xfb, 0x71, 0x90, 0x78,
	0xc0, 0x5c, 0x57, 0x58, 0x6f, 0xaa, 0x5a, 0x5b, 0xcd, 0xce, 0x87, 0xcd, 0x66, 0x18, 0xee, 0x3e,
	0x67, 0x34, 0x7e, 0x1c, 0x9e, 0xb1, 0x0b, 0xba, 0x50, 0xa5, 0xc4, 0x23, 0x90, 0x84, 0xac, 0xe3,
	0x5d, 0x0f, 0x8c, 0xd1, 0xb0, 0x14, 0x05, 0xc2, 0xcc, 0x4b, 0x3f, 0xb3, 0x1b, 0x1a, 0xab, 0xd2,
	0xd6, 0x5a, 0x36, 0x29, 0xc2, 0xdc, 0x2f, 0x26, 0xe1, 0x3a, 0x58, 0x08, 0x95, 0x43, 0xd8, 0x77,
	0x3c, 0xb0, 0x4b, 0x1a, 0x89, 0x83, 0xb0, 0xa2, 0x86, 0x85, 0xd7, 0x7f, 0xe4, 0x5a, 0x28, 0x9b,
	0x54, 0x58, 0xa5, 0x4b, 0x88, 0xfa, 0xd6, 0x28, 0x5c, 0xab, 0x10, 0x6f, 0xba, 0x86, 0xb3, 0xbe,
	0xe5, 0xc1, 0xb5, 0x4c, 0xa6, 0xf2, 0xdc, 0xc0, 0x32, 0x99, 0xbb, 0x56, 0x4f, 0x2c, 0xa1, 0x2b,
	0x2b, 0x4c, 0xf6, 0xdc, 0xa4, 0x29, 0x1a, 0x03, 0x71, 0x42, 0xd6, 0xe1, 0xee, 0xbf, 0x62, 0xd7,
	0x74, 0xe9, 0xf0, 0xc9, 0x7d, 0x8f, 0xfa, 0xf5, 0xc8, 0xee, 0x27, 0xaf, 0x88, 0x72, 0x2f, 0xd2,
	0xcc, 0xc0, 0xca, 0x87, 0x27, 0xf1, 0xb0, 0xfd, 0x6a, 0x39, 0x39, 0xb5, 0x9c, 0xfc, 0xb4, 0x9c,
	0x7c, 0x74, 0x3c, 0x38, 0x75, 0x3c, 0xf8, 0xee, 0x78, 0xf0, 0x72, 0x35, 0x9e, 0xfc, 0x38, 0x5d,
	0xdf, 0xbe, 0x57, 0x68, 0xf6, 0x91, 0x3f, 0xfd, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x47, 0x00,
	0x73, 0x24, 0x9f, 0x01, 0x00, 0x00,
}

func (m *Developer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Developer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Developer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feedbacks) > 0 {
		for iNdEx := len(m.Feedbacks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Feedbacks[iNdEx])
			copy(dAtA[i:], m.Feedbacks[iNdEx])
			i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Feedbacks[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.TaskFail != 0 {
		i = encodeVarintDeveloper(dAtA, i, uint64(m.TaskFail))
		i--
		dAtA[i] = 0x50
	}
	if m.TaskSuccess != 0 {
		i = encodeVarintDeveloper(dAtA, i, uint64(m.TaskSuccess))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Skills) > 0 {
		for iNdEx := len(m.Skills) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Skills[iNdEx])
			copy(dAtA[i:], m.Skills[iNdEx])
			i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Skills[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Major) > 0 {
		i -= len(m.Major)
		copy(dAtA[i:], m.Major)
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Major)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Education) > 0 {
		i -= len(m.Education)
		copy(dAtA[i:], m.Education)
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Education)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Introduce) > 0 {
		i -= len(m.Introduce)
		copy(dAtA[i:], m.Introduce)
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Introduce)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeveloper(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeveloper(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Developer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	l = len(m.Introduce)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	l = len(m.Education)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	l = len(m.Major)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	if len(m.Skills) > 0 {
		for _, s := range m.Skills {
			l = len(s)
			n += 1 + l + sovDeveloper(uint64(l))
		}
	}
	if m.TaskSuccess != 0 {
		n += 1 + sovDeveloper(uint64(m.TaskSuccess))
	}
	if m.TaskFail != 0 {
		n += 1 + sovDeveloper(uint64(m.TaskFail))
	}
	if len(m.Feedbacks) > 0 {
		for _, s := range m.Feedbacks {
			l = len(s)
			n += 1 + l + sovDeveloper(uint64(l))
		}
	}
	return n
}

func sovDeveloper(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeveloper(x uint64) (n int) {
	return sovDeveloper(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Developer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeveloper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Developer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Developer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Education", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Education = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Major = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skills = append(m.Skills, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskSuccess", wireType)
			}
			m.TaskSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskSuccess |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskFail", wireType)
			}
			m.TaskFail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskFail |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feedbacks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feedbacks = append(m.Feedbacks, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeveloper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeveloper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeveloper(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeveloper
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeveloper
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeveloper
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeveloper
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeveloper        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeveloper          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeveloper = fmt.Errorf("proto: unexpected end of group")
)
