// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sideline/sideline/task.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Task struct {
	Id            uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Remuneration  string   `protobuf:"bytes,4,opt,name=remuneration,proto3" json:"remuneration,omitempty"`
	Deposit       string   `protobuf:"bytes,5,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Collateral    string   `protobuf:"bytes,6,opt,name=collateral,proto3" json:"collateral,omitempty"`
	Employer      string   `protobuf:"bytes,7,opt,name=employer,proto3" json:"employer,omitempty"`
	Developer     string   `protobuf:"bytes,8,opt,name=developer,proto3" json:"developer,omitempty"`
	Accuser       string   `protobuf:"bytes,9,opt,name=accuser,proto3" json:"accuser,omitempty"`
	JudgeHeight   uint64   `protobuf:"varint,10,opt,name=judgeHeight,proto3" json:"judgeHeight,omitempty"`
	VotedAccounts []string `protobuf:"bytes,11,rep,name=votedAccounts,proto3" json:"votedAccounts,omitempty"`
	VoteYes       uint64   `protobuf:"varint,12,opt,name=voteYes,proto3" json:"voteYes,omitempty"`
	VoteNo        uint64   `protobuf:"varint,13,opt,name=voteNo,proto3" json:"voteNo,omitempty"`
	Deadline      uint64   `protobuf:"varint,14,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Deliver       string   `protobuf:"bytes,15,opt,name=deliver,proto3" json:"deliver,omitempty"`
	DeliverHeight uint64   `protobuf:"varint,16,opt,name=deliverHeight,proto3" json:"deliverHeight,omitempty"`
	Status        uint64   `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_9db0135d1b1d3183, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetRemuneration() string {
	if m != nil {
		return m.Remuneration
	}
	return ""
}

func (m *Task) GetDeposit() string {
	if m != nil {
		return m.Deposit
	}
	return ""
}

func (m *Task) GetCollateral() string {
	if m != nil {
		return m.Collateral
	}
	return ""
}

func (m *Task) GetEmployer() string {
	if m != nil {
		return m.Employer
	}
	return ""
}

func (m *Task) GetDeveloper() string {
	if m != nil {
		return m.Developer
	}
	return ""
}

func (m *Task) GetAccuser() string {
	if m != nil {
		return m.Accuser
	}
	return ""
}

func (m *Task) GetJudgeHeight() uint64 {
	if m != nil {
		return m.JudgeHeight
	}
	return 0
}

func (m *Task) GetVotedAccounts() []string {
	if m != nil {
		return m.VotedAccounts
	}
	return nil
}

func (m *Task) GetVoteYes() uint64 {
	if m != nil {
		return m.VoteYes
	}
	return 0
}

func (m *Task) GetVoteNo() uint64 {
	if m != nil {
		return m.VoteNo
	}
	return 0
}

func (m *Task) GetDeadline() uint64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *Task) GetDeliver() string {
	if m != nil {
		return m.Deliver
	}
	return ""
}

func (m *Task) GetDeliverHeight() uint64 {
	if m != nil {
		return m.DeliverHeight
	}
	return 0
}

func (m *Task) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*Task)(nil), "sideline.sideline.Task")
}

func init() { proto.RegisterFile("sideline/sideline/task.proto", fileDescriptor_9db0135d1b1d3183) }

var fileDescriptor_9db0135d1b1d3183 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xbb, 0x6e, 0xdb, 0x30,
	0x14, 0x86, 0x2d, 0xdf, 0x45, 0x5f, 0x5a, 0x13, 0x45, 0x71, 0x5a, 0x18, 0x82, 0x60, 0x74, 0xf0,
	0xe4, 0x0e, 0x7e, 0x82, 0x76, 0xea, 0xd4, 0xc1, 0xc8, 0x92, 0x6c, 0x8c, 0x78, 0xe0, 0x30, 0xa6,
	0x45, 0x81, 0xa4, 0x8c, 0xf8, 0x2d, 0xf2, 0x58, 0x19, 0x3d, 0x66, 0x0c, 0xec, 0x3d, 0xcf, 0x10,
	0x90, 0xba, 0x44, 0xde, 0xce, 0xff, 0xfd, 0x94, 0x7e, 0x9e, 0xc3, 0x43, 0xe6, 0x46, 0x70, 0x94,
	0x22, 0xc5, 0xdf, 0x75, 0x61, 0x99, 0xd9, 0xad, 0x32, 0xad, 0xac, 0xa2, 0xb3, 0x0a, 0xae, 0xaa,
	0x62, 0xf1, 0xde, 0x21, 0xdd, 0x1b, 0x66, 0x76, 0x74, 0x4a, 0xda, 0x82, 0x43, 0x10, 0x07, 0xcb,
	0xee, 0xa6, 0x2d, 0x38, 0xfd, 0x46, 0x7a, 0x56, 0x58, 0x89, 0xd0, 0x8e, 0x83, 0x65, 0xb8, 0x29,
	0x04, 0x8d, 0xc9, 0x88, 0xa3, 0x49, 0xb4, 0xc8, 0xac, 0x50, 0x29, 0x74, 0xbc, 0xd7, 0x44, 0x74,
	0x41, 0xc6, 0x1a, 0xf7, 0x79, 0x8a, 0x9a, 0xf9, 0x23, 0x5d, 0x7f, 0xe4, 0x8a, 0x51, 0x20, 0x03,
	0x8e, 0x99, 0x32, 0xc2, 0x42, 0xcf, 0xdb, 0x95, 0xa4, 0x11, 0x21, 0x89, 0x92, 0x92, 0x59, 0xd4,
	0x4c, 0x42, 0xdf, 0x9b, 0x0d, 0x42, 0x7f, 0x92, 0x21, 0xee, 0x33, 0xa9, 0x8e, 0xa8, 0x61, 0xe0,
	0xdd, 0x5a, 0xd3, 0x39, 0x09, 0x39, 0x1e, 0x50, 0xaa, 0x0c, 0x35, 0x0c, 0xbd, 0xf9, 0x09, 0x5c,
	0x26, 0x4b, 0x92, 0xdc, 0xa0, 0x86, 0xb0, 0xc8, 0x2c, 0xa5, 0xeb, 0xe9, 0x31, 0xe7, 0x5b, 0xfc,
	0x87, 0x62, 0xfb, 0x60, 0x81, 0xf8, 0x11, 0x34, 0x11, 0xfd, 0x45, 0x26, 0x07, 0x65, 0x91, 0xff,
	0x49, 0x12, 0x95, 0xa7, 0xd6, 0xc0, 0x28, 0xee, 0x2c, 0xc3, 0xcd, 0x35, 0x74, 0x09, 0x0e, 0xdc,
	0xa2, 0x81, 0xb1, 0xff, 0x47, 0x25, 0xe9, 0x77, 0xd2, 0x77, 0xe5, 0x7f, 0x05, 0x13, 0x6f, 0x94,
	0xca, 0x75, 0xc3, 0x91, 0x71, 0xf7, 0x10, 0x30, 0xf5, 0x4e, 0xad, 0x8b, 0x19, 0x49, 0x71, 0x40,
	0x0d, 0x5f, 0xaa, 0x19, 0x79, 0xe9, 0x6e, 0x53, 0x96, 0xe5, 0x8d, 0xbf, 0xfa, 0x4f, 0xaf, 0xa1,
	0xcb, 0x34, 0x96, 0xd9, 0xdc, 0xc0, 0xac, 0xc8, 0x2c, 0xd4, 0xdf, 0xf5, 0xcb, 0x39, 0x0a, 0x4e,
	0xe7, 0x28, 0x78, 0x3b, 0x47, 0xc1, 0xf3, 0x25, 0x6a, 0x9d, 0x2e, 0x51, 0xeb, 0xf5, 0x12, 0xb5,
	0xee, 0x7e, 0xd4, 0x2b, 0xf3, 0xd4, 0xd8, 0x9e, 0x63, 0x86, 0xe6, 0xbe, 0xef, 0xf7, 0x67, 0xfd,
	0x11, 0x00, 0x00, 0xff, 0xff, 0x50, 0xb9, 0xa8, 0x5e, 0x5f, 0x02, 0x00, 0x00,
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.DeliverHeight != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.DeliverHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Deliver) > 0 {
		i -= len(m.Deliver)
		copy(dAtA[i:], m.Deliver)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Deliver)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Deadline != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x70
	}
	if m.VoteNo != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.VoteNo))
		i--
		dAtA[i] = 0x68
	}
	if m.VoteYes != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.VoteYes))
		i--
		dAtA[i] = 0x60
	}
	if len(m.VotedAccounts) > 0 {
		for iNdEx := len(m.VotedAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VotedAccounts[iNdEx])
			copy(dAtA[i:], m.VotedAccounts[iNdEx])
			i = encodeVarintTask(dAtA, i, uint64(len(m.VotedAccounts[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.JudgeHeight != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.JudgeHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Accuser) > 0 {
		i -= len(m.Accuser)
		copy(dAtA[i:], m.Accuser)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Accuser)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Developer) > 0 {
		i -= len(m.Developer)
		copy(dAtA[i:], m.Developer)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Developer)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Employer) > 0 {
		i -= len(m.Employer)
		copy(dAtA[i:], m.Employer)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Employer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Collateral) > 0 {
		i -= len(m.Collateral)
		copy(dAtA[i:], m.Collateral)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Collateral)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Remuneration) > 0 {
		i -= len(m.Remuneration)
		copy(dAtA[i:], m.Remuneration)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Remuneration)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Remuneration)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Collateral)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Employer)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Developer)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Accuser)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.JudgeHeight != 0 {
		n += 1 + sovTask(uint64(m.JudgeHeight))
	}
	if len(m.VotedAccounts) > 0 {
		for _, s := range m.VotedAccounts {
			l = len(s)
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.VoteYes != 0 {
		n += 1 + sovTask(uint64(m.VoteYes))
	}
	if m.VoteNo != 0 {
		n += 1 + sovTask(uint64(m.VoteNo))
	}
	if m.Deadline != 0 {
		n += 1 + sovTask(uint64(m.Deadline))
	}
	l = len(m.Deliver)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.DeliverHeight != 0 {
		n += 2 + sovTask(uint64(m.DeliverHeight))
	}
	if m.Status != 0 {
		n += 2 + sovTask(uint64(m.Status))
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remuneration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remuneration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Employer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Employer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Developer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accuser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accuser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeHeight", wireType)
			}
			m.JudgeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JudgeHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotedAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotedAccounts = append(m.VotedAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteYes", wireType)
			}
			m.VoteYes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteYes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteNo", wireType)
			}
			m.VoteNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteNo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deliver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deliver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverHeight", wireType)
			}
			m.DeliverHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeliverHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
